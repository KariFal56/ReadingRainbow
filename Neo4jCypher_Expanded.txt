Expansive Neo4j DB Testing

In order to test multiple intersecting Books, Libraries and Wish Lists, a more elaborate database is needed. As before, download and install Neo4j desktop (if you have not already), set 
up a local database, and import the associated Neo4jDB_expansive_Testingv1.4 csv file. Be sure to copy your local file URL and insert into LOAD CSV WITH HEADERS FROM statement.

LOAD CSV WITH HEADERS FROM 'http://localhost:11001/project-32e06daf-0ca3-47a0-91f0-8b4cc74c1ebc/Neo4jDB_expansive_Testing_v1.4.csv' AS line
MERGE (p1:Person { Name: line.Unique_Name, Profile: line.About_Me, Portrait: line.Profile_Img_URL })
MERGE (b1:Book { Id: line.L_Book_ID, Title: line.L_B_Title, Author: line.L_B_Authors, Thumbnail: line.L_B_Thumbnail, PublishDate: line.L_B_Publish_Date, PageNum: line.L_B_Pages, Description: line.L_B_Description, ISBN10: line.L_B_ISBN_10, ISBN13: line.L_B_ISBN_13 })
MERGE (b2:Book { Id: line.W_Book_ID, Title: line.W_B_Title, Author: line.W_B_Authors, Thumbnail: line.W_B_Thumbnail, PublishDate: line.W_B_Publish_Date, PageNum: line.W_B_Pages, Description: line.W_B_Description, ISBN10: line.W_B_ISBN_10, ISBN13: line.W_B_ISBN_13 })
MERGE (p1)-[w:WISH_LISTS]->(b2)
MERGE (p1)-[l:IN_LIBRARY]->(b1)

Next, create FRIENDS_WITH relations. Notice in this case, we use single Direction friend relationships at the database layer but at the query language layer, we ignore directionality (or in other words,
use bi-directional queries). 

For instance, MATCH (p1:Person)-[r:FRIENDS_WITH]-(p2:Person) is the same as
MATCH (p1:Person)-[r:FRIENDS_WITH]->(p2:Person) AND MATCH (p2:Person)-[r:FRIENDS_WITH]->(p1:Person).
Where bi-directional relationships are implicit (or explicit) as in the case of friends, we model such using single FRIENDS_WITH relationship with arbitrary direction.

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Siegfried Kircheis" AND p2.Name="Wolfgang Mittermeyer"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Siegfried Kircheis" AND p2.Name="Hildegard von Mariendorf"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Siegfried Kircheis" AND p2.Name="Paul von Oberstein"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Siegfried Kircheis" AND p2.Name="Walter von Schonkopf"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Hildegard von Mariendorf" AND p2.Name="Paul von Oberstein"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Hildegard von Mariendorf" AND p2.Name="Wolfgang Mittermeyer"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Wolfgang Mittermeyer" AND p2.Name="Walter von Schonkopf"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Yang Wen-Li" AND p2.Name="Edwin Fischer"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Yang Wen-Li" AND p2.Name="Alexander Bucock"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

MATCH (p1:Person), (p2:Person) WHERE p1.Name="Edwin Fischer" AND p2.Name="Alexander Bucock"
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

Alternatively, for more advanced Cypher users, you may use:
MATCH (p1:Person {Name: "Dusty Attenborough"}), (p2:Person {Name: "Oskar von Reuenthal"})
CREATE (p1)-[r:FRIENDS_WITH]->(p2)
RETURN p1,p2

Next, create RECOMMEND_B (recommend book) relationships. 
MATCH (p:Person), (b:Book) WHERE p.Name="Hildegard von Mariendorf" AND b.Id="7lGdCwAAQBAJ"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Hildegard von Mariendorf" AND b.Id="RmkhNOzuV5YC"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Hildegard von Mariendorf" AND b.Id="PDF7PwAACAAJ"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Wolfgang Mittermeyer" AND b.Id="8CHIVgrxz9YC"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Siegfried Kircheis" AND b.Id="LUyeAgAAQBAJ"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Walter von Schonkopf" AND b.Id="7lGdCwAAQBAJ"
CREATE (p)-[r:IN_LIBRARY]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Walter von Schonkopf" AND b.Id="7lGdCwAAQBAJ"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Edwin Fischer" AND b.Id="IF6-q2TzVpMC"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Edwin Fischer" AND b.Id="4bn7XhMeBH8C"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Alexander Bucock" AND b.Id="IF6-q2TzVpMC"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.Name="Alexander Bucock" AND b.Id="4bn7XhMeBH8C"
CREATE (p)-[r:RECOMMEND_B]->(b)
RETURN p,b