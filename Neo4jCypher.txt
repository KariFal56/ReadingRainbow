Neo4j is a graphical database which may be difficult to comprehend for those of us who are used to SQL; therefore, hopefully this short guide with help.
I start from a more SQL like standpoint in the form of tables (see attached excel/csv file) in which there are 4 tables. A Library Book list, a Wish List, a Friend List, and a User List.
The Books use a unique Google Books ID and Users each have a Unique Username. First, we load and import the csv file using Neo4j desktop (insert your local path to file in LOAD CSV function). 
We create unique nodes with properties (or attributes for SQL folks) for each user and each book in the form of MERGE (node:label {key1: value1, key2: value2, ...keyN: valueN }).
MERGE is essentially a catch all term that CREATES UNIQUE nodes/relations.

Be sure to import the CSV file into Neo4j Desktop and Copy File URL (Or file Path and Use file:/// prefix before file name) to clipboad and insert into LOAD CSV statement.
LOAD CSV WITH HEADERS FROM 'http://localhost:11001/project-32e06daf-0ca3-47a0-91f0-8b4cc74c1ebc/Neo4jDB.csv' AS line
MERGE (p1:Person { name: line.Unique_Name, profile: line.About_Me, portrait: line.Profile_Img_URL })
MERGE (p2:Person { name: line.F_Unique_Name, profile: line.F_About_Me, portrait: line.F_Profile_Img_URL })
MERGE (b1:Book { id: line.L_Book_ID, title: line.L_B_Title, author: line.L_B_Authors, thumbnail: line.L_B_Thumbnail, publishdate: line.L_B_Publish_Date, pagenum: line.L_B_Pages, description: line.L_B_Description, isbn10: line.L_B_ISBN_10, isbn13: line.L_B_ISBN_13 })
MERGE (b2:Book { id: line.W_Book_ID, title: line.W_B_Title, author: line.W_B_Authors, thumbnail: line.W_B_Thumbnail, publishdate: line.W_B_Publish_Date, pagenum: line.W_B_Pages, description: line.W_B_Description, isbn10: line.W_B_ISBN_10, isbn13: line.W_B_ISBN_13 })
MERGE (p1)-[f:FRIENDS_WITH]->(p2)
MERGE (p1)-[w:WISH_LISTS]->(b2)
MERGE (p1)-[l:IN_LIBRARY]->(b1)

Next, lets create another relationship, ie. Recommend Book

MATCH (p:Person), (b:Book) WHERE p.name="Frederica Greenhill" AND b.id="JZpeDwAAQBAJ"
CREATE (p)-[r:Recommend_B]->(b)
RETURN p,b

This should create a relationship between two existing Nodes (Frederica and the Book with id....)

To view your graphical database schema, use CALL db.schema.visualization() - it should be merely Persons and Books with the relations FRIENDS_WITH, WITH_LISTS, IN_LIBRARY (and later, Recommend_B)

To view the entire chart, you can enter a MATCH Query and Return Book and Person nodes. Notice that this database is heavily curated for specific testing purposes. For Instance:
MATCH(p1)-[w]->(b1)
RETURN p1,w,b1

To deal with Null Data, simply use something like LOAD CSV WITH HEADERS FROM 'http://localhost:11001/project-32e06daf-0ca3-47a0-91f0-8b4cc74c1ebc/Neo4jDB.csv' AS line WITH line WHERE line.enter_your_label_here IS NOT NULL

Recommend to Unique_Name (in this case, Frederica Greenhill") based on favorite Author. Recommended book should not be in WISH_LISTS and IN_LIBRARY.
MATCH (b:Book), (p:Person)
WHERE b.author = "George R. R. Martin" AND p.name="Frederica Greenhill" AND NOT (p)-[:WISH_LISTS]->(b) AND NOT (p)-[:IN_LIBRARY]->(b)
RETURN b

Books that Friends Recommend.
MATCH (b:Book), (p:Person), (f:Person)
WHERE p.name="Julian Minci" AND (f)-[:FRIENDS_WITH]->(p) AND (f)-[:Recommend_B]->(b) AND NOT (p)-[:WISH_LISTS]->(b) AND NOT (p)-[:IN_LIBRARY]->(b)
RETURN b

Jaccard Index x is any 0<x<1 that indicates the similarity between two sets; in the case, we want to know the similarity between User Libraries and User Wish Lists. Based on this similarity index, we can recommend book distinct to either user.
If the Jaccard Index of two user libraries is = 1, that means they have the exact same books in their library. If Jaccard Index = 0, the two users have no books in common.

Create new User (for Jaccard Index Recommendation Testing):

CREATE (p:Person{name:"Dusty Attenborough" , profile:"FPA Commodore" , portrait:"URL"})
RETURN p

MATCH (p:Person), (b:Book) WHERE p.name="Dusty Attenborough" AND b.id="4KwCoQEACAAJ"
CREATE (p)-[r:WISH_LISTS]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.name="Dusty Attenborough" AND b.id="5NomkK4EV68C"
CREATE (p)-[r:IN_LIBRARY]->(b)
RETURN p,b

MATCH (p:Person), (b:Book) WHERE p.name="Dusty Attenborough" AND b.id="fdSJDQAAQBAJ"
CREATE (p)-[r:IN_LIBRARY]->(b)
RETURN p,b

Jaccard Index based on User Libraries (Assume Unique_User_Name="Dusty Attenborough")
//API Get, Set Unique_User_Name based on Signed In User

MATCH (p1:Person {name: "Dusty Attenborough"})-[:IN_LIBRARY]->(b:Book)<-[:IN_LIBRARY]-(p2:Person)
WITH p1, p2, COUNT(b) AS intersection, COLLECT(b.id) AS i
MATCH (p1)-[:IN_LIBRARY]->(b1:Book)
WITH p1, p2, intersection, i, COLLECT(b1.id) AS s1
MATCH (p2)-[:IN_LIBRARY]->(b2:Book)
WITH p1, p2, intersection, i, s1, COLLECT(b2.id) AS s2
WITH p1, p2, intersection, s1, s2
WITH p1, p2, intersection, [y IN s2 WHERE NOT y IN s1] AS unique, s1+[x IN s2 WHERE NOT x IN s1] AS union, s1, s2
WITH p1, p2, intersection, unique, union, s1, s2, ((1.0*intersection/SIZE(union))) AS jaccard ORDER BY jaccard DESC LIMIT 10
RETURN jaccard > 0.2, jaccard, unique

This should return a list (if any) of distinct Google Book IDs that Dusty Attenborough does not have (that Yang Wen-Li have). To view that book node:
MATCH (b:Book)
WHERE b.id = "1VdJlwEACAAJ"
RETURN b

Jaccard Index based on User Wish Lists (Assume Unique_User_Name="Dusty Attenborough")
//API Get, Set Unique_User_Name based on Signed In User

MATCH (p1:Person {name: "Dusty Attenborough"})-[:WISH_LISTS]->(b:Book)<-[:WISH_LISTS]-(p2:Person)
WITH p1, p2, COUNT(b) AS intersection, COLLECT(b.id) AS i
MATCH (p1)-[:WISH_LISTS]->(b1:Book)
WITH p1, p2, intersection, i, COLLECT(b1.id) AS w1
MATCH (p2)-[:WISH_LISTS]->(b2:Book)
WITH p1, p2, intersection, i, w1, COLLECT(b2.id) AS w2
WITH p1, p2, intersection, w1, w2
WITH p1, p2, intersection, [y IN w2 WHERE NOT y IN w1] AS unique, w1+[x IN w2 WHERE NOT x IN w1] AS union, w1, w2
WITH p1, p2, intersection, unique, union, w1, w2, ((1.0*intersection/SIZE(union))) AS jaccard ORDER BY jaccard DESC LIMIT 10
RETURN jaccard > 0.2, jaccard, unique

This should return a list (if any) of distinct Google Book IDs that Dusty Attenborough does not have in his Wish List (that Yang Wen-Li have). To view the book nodes:
MATCH (b1:Book), (b2:Book)
WHERE b1.id = "2jf8Tna_MxMC" AND b2.id = "cxNVDgAAQBAJ"
RETURN b1, b2

//For API
[HttpPut]
Due to the nature of Neo4j (and other graphical databases), creating new Users and or New Books consists of creating a new Node. However, it is possible that such book node already exists so it 
may be better to use Put (or use MERGE in Cypher code which Creates Unique book nodes).

Create New User
Get, Set Unique_User_Name
Get, Set Profile_Info
Get, Set Portrait_URL

CREATE (p:Person{name:"Unique_User_Name" , profile:"Profile_Info" , portrait:"Portrait_URL"})
RETURN p

//Create New Book (safer to use Merge in case Book already in Neo4j)
MERGE (b:Book { id: Book_ID, title: B_Title, author: B_Authors, thumbnail: B_Thumbnail, publishdate: B_Publish_Date, pagenum: B_Pages, description: B_Description, isbn10: B_ISBN_10, isbn13: B_ISBN_13 })

//Add Book to Library (create IN_LIBRARY)
Get, Set Unique_User_Name,
Get, Set Google_Book_ID

MATCH (p:Person), (b:Book) 
WHERE p.name="Unique_User_Name" AND b.id="Google_Book_ID"
CREATE (p)-[r:IN_LIBRARY]->(b)
RETURN p,b

//Add Book to WishList (create WISH_LISTS relation)
Get, Set Unique_User_Name,
Get, Set Google_Book_ID

MATCH (p:Person), (b:Book) 
WHERE p.name="Unique_User_Name" AND b.id="Google_Book_ID"
CREATE (p)-[r:WISH_LISTS]->(b)
RETURN p,b

//Recommend Book Already in Library (create Recommend_B relation)
Get, Set Unique_User_Name,
Get, Set Google_Book_ID

MATCH (p:Person), (b:Book) 
WHERE p.name="Unique_User_Name" AND b.id="Google_Book_ID"
CREATE (p)-[r:Recommend_B]->(b)
RETURN p,b

//Delete Book from Library (Delete IN_LIBRARY relation)
MATCH (p:Person {name: "Alexander Bucock"})-[r:IN_LIBRARY]->(b:Book {id: "4bn7XhMeBH8C"})
DELETE r

//Delete Recommendation (Delete Recommend_B relation)
MATCH (p:Person {name: "Wolfgang Mittermeyer"})-[r:Recommend_B]->(b:Book {id: "8CHIVgrxz9YC"})
DELETE r

//Remove Friend from Friend List (Delete FRIENDS_WITH relation)
MATCH (p1:Person {name: "Wolfgang Mittermeyer"})-[r:FRIENDS_WITH]-(p2:Person {name: "Siegfried Kircheis"})
DELETE r

//Delete User Account (Delete User's Node and ALL relationships associated with User Node)
MATCH (p:Person { name: 'Siegfried Kircheis' })
DETACH DELETE p